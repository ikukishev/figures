#include "cregulapolygon.h"

REGISTER_FIGURE(CRegulaPolygon)

CRegulaPolygon::CRegulaPolygon(double radius, int countAngles, const std::string &name)
    : CPolygon(countAngles+1, name)
{
    double ang=0, dAngle=360.0/countAngles;
    for(int i(0); i<countAngles; i++)
    {
        ang+=dAngle;
        (*this)[i].x=radius*cos(ang*PI/180.0);
        (*this)[i].y=radius*sin(ang*PI/180.0);
    }
    (*this)[countAngles].x=0;
    (*this)[countAngles].y=0;
}

std::shared_ptr<CRegulaPolygon> CRegulaPolygon::load(const QJsonObject &object)
{

}

QJsonObject CRegulaPolygon::toJSON() const
{
   QJsonObject obj;
   obj.insert("radius", getRadius());
   obj.insert("name", QString::fromStdString(getName()));
   
}

double CRegulaPolygon::getRadius() const
{
   return distance((*this)[countAngles()-1], (*this)[0]);
}

double CRegulaPolygon::area() const
{
   double mLenghtEdge=distance((*this)[0], (*this)[1]);
   return countAngles()*mLenghtEdge*mLenghtEdge/(4*tan(180/countAngles()* 3.14159265/180.0));
}

double CRegulaPolygon::perimeter() const
{
    double mLenghtEdge=distance((*this)[0], (*this)[1]);
    return countAngles()*mLenghtEdge;
}
